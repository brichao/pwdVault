using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace pwdvault.Services
{
    internal class EncryptionService
    {

        /// <summary>
        /// <para>
        /// This method take the new password and the useer's key and returns the encrypted password using AES256 encryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is randomly generated by AES, and is stored in the encrypted password returned, prior to the password by 16 bytes.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static byte[] EncryptPassword(string password, byte[] key)
        {
            if(String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("The password is empty.");
            }
            if(key == null || key.Length == 0)
            {
                throw new ArgumentException("The encryption key is either null or empty.");
            }

            byte[] encryptedPassword;
            using(Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.GenerateIV();

                using(MemoryStream memoryStream = new MemoryStream())
                {
                    memoryStream.Write(aes.IV, 0, 16);
                    using(CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        byte[] passwordBytes = Encoding.UTF32.GetBytes(password);
                        cryptoStream.Write(passwordBytes, 0, passwordBytes.Length);
                    }
                    encryptedPassword = memoryStream.ToArray();
                } 
            }

            return encryptedPassword;
        }

        /// <summary>
        /// <para>
        /// This method take the encrypted password and the user's key and returns the decrypted password using AES256 decryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is retrieved from the encrypted password, it corresponds to the first 16 bytes. 
        /// </para>
        /// </summary>
        /// <param name="encryptedPassword"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static string DecryptPassword(byte[] encryptedPassword, byte[] key)
        {
            if (encryptedPassword == null || encryptedPassword.Length == 0)
            {
                throw new ArgumentException("The encrypted password is either null or empty.");
            }
            if (key == null || key.Length == 0)
            {
                throw new ArgumentException("The decryption key is either null or empty.");
            }
            using (Aes aes = Aes.Create())
            {
                aes.Key = key;

                using (MemoryStream memoryStream = new MemoryStream(encryptedPassword))
                {
                    byte[] iv = new byte[16];
                    memoryStream.Read(iv, 0, 16);
                    aes.IV = iv;
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Read))
                    {
                        byte[] decryptedPasswordByte = new byte[encryptedPassword.Length];
                        var byteCountPassword = cryptoStream.Read(decryptedPasswordByte, 0, encryptedPassword.Length);
                        return Encoding.UTF32.GetString(decryptedPasswordByte, 0, byteCountPassword);
                    }
                }
            }
        }

        //public static byte[] EncryptFile(string inputFilePath, string password)
        //{
        //    if (String.IsNullOrEmpty(password))
        //    {
        //        throw new ArgumentException("The password is empty.");
        //    }
        //    if (String.IsNullOrEmpty(inputFilePath))
        //    {
        //        throw new ArgumentException("Input file path cannot be empty.");
        //    }

        //    byte[] salt = new byte[16];
        //    RandomNumberGenerator randomNumberGenerator = RandomNumberGenerator.Create();
        //    randomNumberGenerator.GetBytes(salt);

        //    Rfc2898DeriveBytes keyGenerator = new Rfc2898DeriveBytes(password, salt, 10000, HashAlgorithmName.SHA256);
        //    byte[] keyFileEncryption = keyGenerator.GetBytes(32);

        //    using (Aes aes = Aes.Create())
        //    {
        //        aes.Key = keyFileEncryption;
        //        aes.IV = new byte[16];
        //        aes.Mode = CipherMode.CBC;

        //        using (FileStream inputFileStream = new FileStream(inputFilePath, FileMode.Open))
        //        {
        //            using (MemoryStream outputEncryptedByteFile = new MemoryStream())
        //            {
        //                using (CryptoStream cryptoStream = new CryptoStream(outputEncryptedByteFile, aes.CreateEncryptor(), CryptoStreamMode.Write))
        //                {
        //                    inputFileStream.CopyTo(cryptoStream);
        //                    cryptoStream.Close();
        //                    return outputEncryptedByteFile.ToArray();
        //                }
        //            }
        //        }
        //    }
        //}

        public static byte[] GetKeyFromFile()
        {
            var folderDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "PasswordVault");
            string keyFilePath = Path.Combine(folderDataPath, "fileKey");
            return File.ReadAllBytes(keyFilePath);
        }

        //public static byte[] DecryptFile(byte[] inputFileEncryptedBytes, string password)
        //{
        //    if (String.IsNullOrEmpty(password))
        //    {
        //        throw new ArgumentException("Password cannot be empty.");
        //    }
        //    if (inputFileEncryptedBytes == null || inputFileEncryptedBytes.Length == 0)
        //    {
        //        throw new ArgumentException("Encrypted input file bytes cannot be null or empty.");
        //    }
        //    var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        //    string keyFilePathDecrypted = Path.Combine(appDataPath, "fileKeyDecrypted");
        //    byte[] passwordKeyEncryption;
        //    byte[] salt = new byte[16];
        //    Array.Copy(inputFileEncryptedBytes, 0, salt, 0, salt.Length);
        //    Rfc2898DeriveBytes keyGenerator = new Rfc2898DeriveBytes(password, salt, 10000, HashAlgorithmName.SHA256);
        //    byte[] keyFileDecryption = keyGenerator.GetBytes(32);

        //    using(Aes aes = Aes.Create())
        //    {
        //        aes.Key = keyFileDecryption;
        //        aes.IV = new byte[16];
        //        aes.Mode = CipherMode.CBC;

        //        using(MemoryStream inputStream = new MemoryStream(inputFileEncryptedBytes, salt.Length, inputFileEncryptedBytes.Length - salt.Length, false))
        //        {
        //            using(CryptoStream cryptoStream = new CryptoStream(inputStream, aes.CreateDecryptor(), CryptoStreamMode.Read))
        //            {
        //                using(FileStream outputFileStream = new FileStream(keyFilePathDecrypted, FileMode.Create))
        //                {
        //                    cryptoStream.CopyTo(outputFileStream);
        //                    passwordKeyEncryption = File.ReadAllBytes(keyFilePathDecrypted);
        //                    File.Delete(keyFilePathDecrypted);
        //                    return passwordKeyEncryption;
        //                }
        //            }
        //        }
        //    }
        //}

        /// <summary>
        /// <para>
        /// This method takes the user's password and generate a new key for encrypting further added passwords. The key generation is derived froṁ the password.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <returns></returns>
        public static byte[] GenerateKey(string password)
        {
            if (String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("The password is empty.");
            }
            byte[] generatedKey;
            byte[] salt = new byte[16];
            RandomNumberGenerator randomNumberGenerator = RandomNumberGenerator.Create();
            randomNumberGenerator.GetBytes(salt);

            Rfc2898DeriveBytes keyGenerator = new Rfc2898DeriveBytes(password, salt, 10000, HashAlgorithmName.SHA256);
            generatedKey = keyGenerator.GetBytes(32);

            return generatedKey;
        }
    }
}

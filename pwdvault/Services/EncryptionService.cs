using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace pwdvault.Services
{
    internal class EncryptionService
    {

        /// <summary>
        /// <para>
        /// This method take the new password and the useer's key and returns the encrypted password using AES256 encryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is randomly generated by AES, and is stored in the encrypted password returned, prior to the password by 16 bytes.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static byte[] EncryptPassword(string password, byte[] key)
        {
            if(String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("Password cannot be empty.");
            }
            if(key == null || key.Length == 0)
            {
                throw new ArgumentException("The key cannot be null or empty.");
            }

            byte[] encryptedPassword;
            using(Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.GenerateIV();

                using(MemoryStream memoryStream = new MemoryStream())
                {
                    memoryStream.Write(aes.IV, 0, 16);
                    using(CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
                        cryptoStream.Write(passwordBytes, 0, passwordBytes.Length);
                        cryptoStream.Close();
                    }
                    encryptedPassword = memoryStream.ToArray();
                } 
            }

            return encryptedPassword;
        }

        /// <summary>
        /// <para>
        /// This method take the encrypted password and the useer's key and returns the deecrypted password using AES256 decryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is stored in the encrypted password as the first 16 bytes. 
        /// </para>
        /// </summary>
        /// <param name="encryptedPassword"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static string DecryptPassword(byte[] encryptedPassword, byte[] key)
        {
            if (encryptedPassword == null || encryptedPassword.Length == 0)
            {
                throw new ArgumentException("The encrypted password cannot be null or empty.");
            }
            if (key == null || key.Length == 0)
            {
                throw new ArgumentException("The key cannot be null or empty.");
            }
            using (Aes aes = Aes.Create())
            {
                aes.Key = key;

                using (MemoryStream memoryStream = new MemoryStream(encryptedPassword))
                {
                    byte[] iv = new byte[16];
                    memoryStream.Read(iv, 0, 16);
                    aes.IV = iv;
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Read))
                    {
                        byte[] decryptedPasswordByte = new byte[encryptedPassword.Length];
                        var byteCountPassword = cryptoStream.Read(decryptedPasswordByte, 0, encryptedPassword.Length);
                        return Encoding.UTF8.GetString(decryptedPasswordByte, 0, byteCountPassword);
                    }
                }
            }
        }
    }
}
